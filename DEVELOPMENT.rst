开发指南
########

功能设计
========

upload
    upload 需要完成的任务有：

    1.  上传图片到服务器
    2.  记录图片信息到数据库，数据库中一条记录创建后不可删除（见 delete）；
        如果重复记录，则刷新文件名信息。
    3.  将文件唯一化保存在 BLOB_DIR 中

apply
    apply 需要完成的工作有：

    1.  从数据库中寻找条目
    2.  将这些条目格式化为 HTML、Markdown、reStructuredText 等的链接形式

delete（todo）
    delete 需要完成的任务有：

    1. 将图片在服务器上删除
    2. 将数据库中的图片信息标记为「不可用」

    .. note:: 数据库中信息将得到保留，并且 BLOB 也不会删除

-   todo 在各行为间提供基于管道的交互方式：比如通过 search 得到一部分结果后，传递给 apply 或 delete 使用。
-   search 在数据库中搜索条目（todo 在数据模型中添加一条 comment 注释字段）

优先级较低的功能：

-   dump 应用数据库中的文件名，将所有 BLOB 保存出来（其他信息将被抛弃）
-   export/import 导出、导入数据库中的数据「暂定以 JSON 形式保存」，BLOB 由于体积极大，
    不会被处理。但会提示用户注意备份。

todo 要实现以上功能，这些是需要尽快完成的任务：

0.  重新设计数据库
1.  设计 stdio 接口
2.  「搜索表达式」解析功能

项目结构层次
============

项目的核心是对图片的管理。

    下面用 ``（主键）`` 表示一个关系或实体的主键

| 图片实体「（哈希），文件名，注释」
| 上传关系「（哈希『代表图片』），（图床名），访问链接，删除链接，创建时间」

「用户层」
    「用户界面」提供命令行或图形（todo）接口，实现在 :module:`picsnake.ui` 子包中。

    这一层主要完成用户意图的解析，例如解析命令行参数等。

「图床适配器层」
    为上层提供统一的接口。实现在下面几个模块中：

    - :module:`picsnake.upload`
    - :module:`picsnake.delete`（todo）

「图床层」
    与图床服务器交互，实现在 :module:`picsnake.site` 子包中
